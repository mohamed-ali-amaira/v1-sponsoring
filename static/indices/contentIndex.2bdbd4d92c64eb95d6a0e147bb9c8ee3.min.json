{"/":{"title":"bienvenue à Pratik !","content":"\r\n## Pratik : votre réussite est la nôtre\r\n","lastmodified":"2024-03-20T15:39:26.7129467+01:00","tags":[]},"/Cours/lesson1":{"title":"1. Installer Thonny","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=gvgO4sCJC\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n\r\n## Description\r\n\r\n- [Lien téléchargement Thonny](https://thonny.org/)\r\n\r\n\u003c!-- - Point 1\r\n- Point 2\r\n\r\n```python\r\n\r\nx = int(input(\"Donner le nombre x : \"))\r\n\r\n``` --\u003e\r\n","lastmodified":"2024-03-23T23:06:28.3051563+01:00","tags":[]},"/Cours/lesson10":{"title":"10. Chaines (partie 2)","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=qwSGdBqkm\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n\r\n## Description\r\n\r\nVoici comment effectuer des manipulations de chaînes de caractères en Python avec des exemples pour les opérations les plus courantes :\r\n\r\n### Concaténation de chaînes de caractères :\r\n\r\nLa concaténation de chaînes de caractères consiste à joindre plusieurs chaînes ensemble.\r\n\r\nExemple :\r\n\r\n```python\r\n# Exemple 1 : Concaténation de deux chaînes de caractères\r\nprenom = \"Jean\"\r\nnom = \"Dupont\"\r\nnom_complet = prenom + \" \" + nom\r\nprint(nom_complet)  # Output: Jean Dupont\r\n\r\n# Exemple 2 : Concaténation de plusieurs chaînes de caractères\r\nmessage = \"Bonjour \" + prenom + \", bienvenue !\"\r\nprint(message)  # Output: Bonjour Jean, bienvenue !\r\n```\r\n\r\n### Répétition de chaînes de caractères :\r\n\r\nLa répétition de chaînes de caractères consiste à répéter une chaîne un certain nombre de fois.\r\n\r\nExemple :\r\n\r\n```python\r\n# Exemple 1 : Répétition d'une chaîne de caractères\r\nsymbole = \"*\"\r\nligne = symbole * 10\r\nprint(ligne)  # Output: **********\r\n\r\n# Exemple 2 : Répétition d'une phrase\r\nphrase = \"Bonne année ! \"\r\nnouvelle_annee = phrase * 3\r\nprint(nouvelle_annee)  # Output: Bonne année ! Bonne année ! Bonne année !\r\n```\r\n\r\n### Extraction de sous-chaînes :\r\n\r\nL'extraction de sous-chaînes consiste à obtenir une partie spécifique d'une chaîne de caractères.\r\n\r\nExemple :\r\n\r\n```python\r\n# Exemple : Extraction d'une sous-chaîne\r\nmot = \"Python\"\r\nsous_mot = mot[2:5]  # Récupère les caractères de l'index 2 à l'index 4 (exclus)\r\nprint(sous_mot)  # Output: tho\r\n```\r\n\r\n### Recherche dans une chaîne :\r\n\r\nLa recherche dans une chaîne consiste à déterminer si une sous-chaîne est présente dans une chaîne donnée.\r\n\r\nExemple :\r\n\r\n```python\r\n# Exemple : Recherche d'une sous-chaîne\r\nphrase = \"Bonjour tout le monde\"\r\nif \"tout\" in phrase:\r\n    print(\"La sous-chaîne 'tout' est présente.\")\r\nelse:\r\n    print(\"La sous-chaîne 'tout' est absente.\")\r\n# Output: La sous-chaîne 'tout' est présente.\r\n```\r\n\r\n### Conversion de casse :\r\n\r\nLa conversion de casse consiste à changer la casse des caractères dans une chaîne de caractères.\r\n\r\nExemple :\r\n\r\n```python\r\n# Exemple : Conversion de casse\r\nnom = \"Dupont\"\r\nnom_majuscule = nom.upper()\r\nprint(nom_majuscule)  # Output: DUPONT\r\n\r\nprenom = \"Jean\"\r\nprenom_minuscule = prenom.lower()\r\nprint(prenom_minuscule)  # Output: jean\r\n```\r\n\r\nVoici quelques opérations supplémentaires sur la manipulation des chaînes de caractères en Python, avec des exemples :\r\n\r\n5. **Remplacement** : Remplacer une partie d'une chaîne de caractères par une autre.\r\n\r\n```python\r\nchaine = \"Il fait beau aujourd'hui\"\r\nnouvelle_chaine = chaine.replace(\"beau\", \"mauvais\")\r\nprint(nouvelle_chaine)  # Output: Il fait mauvais aujourd'hui\r\n```\r\n\r\n6. **Recherche** : Rechercher la première occurrence d'un sous-chaîne dans une chaîne de caractères.\r\n\r\n```python\r\nphrase = \"La vie est belle\"\r\nposition = phrase.find(\"belle\")\r\nprint(position)  # Output: 11 (indice de la première occurrence de \"belle\")\r\n```\r\n\r\nCes exemples illustrent les opérations courantes de manipulation de chaînes de caractères en Python.\r\n","lastmodified":"2024-03-25T00:23:08.4999951+01:00","tags":[]},"/Cours/lesson11":{"title":"11. Listes (intro)","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=GEHoLYnEY\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n","lastmodified":"2024-03-25T00:27:30.9516842+01:00","tags":[]},"/Cours/lesson12":{"title":"12. Installation Numpy","content":"\r\n## Description :\r\n\r\nen fonction de vos questions et commentaires ; nous préparerons cette page pour expliquer comment corriger les erreurs courantes lors de l'installation de numpy sur votre ordinateur ; attendez-vous à ce que cette page soit mise à jour la semaine prochaine ! merci pour la patience\r\n\r\n\u003c!-- ## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\r\n\r\n\r\n\u003c!-- \u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=GEHoLYnEY\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e --\u003e\r\n\r\n\u003c!-- \u003c/div\u003e  --\u003e\r\n\r\n\u003c!-- ## Description\r\n\r\n- [Lien téléchargement Thonny](https://thonny.org/)\r\n\r\n\u003c!-- - Point 1\r\n- Point 2\r\n\r\n```python\r\n\r\nx = int(input(\"Donner le nombre x : \"))\r\n\r\n``` --\u003e --\u003e\r\n","lastmodified":"2024-03-25T00:30:34.289671+01:00","tags":[]},"/Cours/lesson13":{"title":"13. Manipuler les listes","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=GAcXftntp\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n\r\n## Description\r\n\r\nVoici comment déclarer un tableau unidimensionnel avec NumPy, remplir le tableau en utilisant une boucle `for`, imprimer les éléments du tableau à l'aide d'une autre boucle `for`, et obtenir une tranche (slice) du tableau :\r\n\r\n### Déclaration et remplissage d'un tableau unidimensionnel avec NumPy :\r\n\r\n```python\r\nfrom numpy import array\r\n\r\n# Déclaration d'un tableau vide de taille 10\r\ntableau = array([int]*10)\r\n\r\n# Remplissage du tableau en utilisant une boucle for\r\nfor i in range(10):\r\n    tableau[i] = i + 1\r\n\r\n# Impression des éléments du tableau en utilisant une boucle for\r\nfor element in tableau:\r\n    print(element)\r\n\r\n## méthode alternative pour l'impression\r\n\r\nfor i in range(len(tableau)):\r\n    print(tableau[i])\r\n\r\n# Obtenir une tranche (slice) du tableau\r\nslice_tableau = tableau[3:7]\r\nprint(slice_tableau)\r\n```\r\n\r\nDans cet exemple :\r\n\r\n- Nous avons déclaré un tableau vide de taille 10 avec NumPy.\r\n- Ensuite, nous avons utilisé une boucle `for` pour remplir le tableau avec les nombres de 1 à 10.\r\n- Nous avons utilisé une autre boucle `for` pour imprimer les éléments du tableau.\r\n- Enfin, nous avons obtenu une tranche du tableau en sélectionnant les éléments de l'indice 3 à l'indice 6 (inclus) à l'aide de la notation de tranche `[3:7]`.\r\n","lastmodified":"2024-03-25T00:41:35.7387635+01:00","tags":[]},"/Cours/lesson14":{"title":"14. Les Fonctions et les procédures","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=JpdRqTT6y\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n\r\n## Description\r\n\r\nVoici comment définir et utiliser des fonctions en Python, en abordant la déclaration de fonction, l'appel de fonction, les arguments et l'utilisation de la déclaration return :\r\n\r\n### Définition de fonction :\r\n\r\nPour définir une fonction en Python, utilisez le mot-clé `def`, suivi du nom de la fonction et de ses paramètres entre parenthèses. Le bloc de code à exécuter est ensuite indenté sous la déclaration de fonction.\r\n\r\nExemple :\r\n\r\n```python\r\ndef dire_bonjour():\r\n    print(\"Bonjour !\")\r\n```\r\n\r\n### Appel de fonction :\r\n\r\nPour appeler une fonction définie, utilisez simplement son nom suivi de parenthèses.\r\n\r\nExemple :\r\n\r\n```python\r\ndire_bonjour()  # Output: Bonjour !\r\n```\r\n\r\n### Arguments de fonction :\r\n\r\nVous pouvez passer des arguments à une fonction en les spécifiant entre parenthèses lors de la définition de la fonction. Ces arguments peuvent ensuite être utilisés dans le corps de la fonction.\r\n\r\nExemple :\r\n\r\n```python\r\ndef dire_bonjour(nom):\r\n    print(\"Bonjour\", nom, \"!\")\r\n```\r\n\r\n### Utilisation de la déclaration `return` :\r\n\r\nLa déclaration `return` est utilisée pour retourner une valeur à partir d'une fonction. Une fois que la déclaration `return` est atteinte, la fonction se termine.\r\n\r\nExemple :\r\n\r\n```python\r\ndef ajouter(a, b):\r\n    somme = a + b\r\n    return somme\r\n\r\nresultat = ajouter(3, 5)\r\nprint(resultat)  # Output: 8\r\n```\r\n\r\nDans cet exemple, la fonction `ajouter` prend deux arguments `a` et `b`, calcule leur somme, et retourne le résultat à l'appelant.\r\n","lastmodified":"2024-03-25T01:23:33.2845864+01:00","tags":[]},"/Cours/lesson15":{"title":"15. La trie à bulles","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=y7Utp6eUN\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n\r\n## Description\r\n\r\nVoici comment implémenter un tri à bulles (bubble sort) en Python, en abordant la définition de la fonction, l'appel de la fonction, les arguments et l'utilisation de la déclaration return :\r\n\r\n### Définition de fonction pour le tri à bulles :\r\n\r\nPour définir une fonction qui effectue un tri à bulles en Python, utilisez le mot-clé `def`, suivi du nom de la fonction et de ses paramètres entre parenthèses. Le bloc de code à exécuter est ensuite indenté sous la déclaration de fonction.\r\n\r\nExemple :\r\n\r\n```python\r\ndef tri_bulles(liste):\r\n    n = len(liste)\r\n    for i in range(n-1):\r\n        for j in range(0, n-i-1):\r\n            if liste[j] \u003e liste[j+1]:\r\n                liste[j], liste[j+1] = liste[j+1], liste[j]\r\n```\r\n\r\n### Appel de fonction pour le tri à bulles :\r\n\r\nPour trier une liste en utilisant la fonction de tri à bulles définie, appelez simplement la fonction avec la liste à trier en tant qu'argument.\r\n\r\nExemple :\r\n\r\n```python\r\n# Déclaration de la liste à trier\r\nma_liste = [64, 34, 25, 12, 22, 11, 90]\r\n\r\n# Appel de la fonction de tri à bulles\r\ntri_bulles(ma_liste)\r\n\r\n# Affichage de la liste triée\r\nprint(\"Liste triée:\")\r\nfor element in ma_liste:\r\n    print(element)\r\n```\r\n\r\n### Arguments de fonction pour le tri à bulles :\r\n\r\nLa fonction de tri à bulles prend une liste en tant qu'argument. Cette liste sera triée et modifiée directement par la fonction.\r\n\r\n### Utilisation de la déclaration `return` pour le tri à bulles :\r\n\r\nDans ce cas, la fonction ne retourne pas de valeur à l'appelant car elle modifie directement la liste passée en argument. Ainsi, il n'y a pas de déclaration `return` dans cette fonction.\r\n","lastmodified":"2024-03-25T01:26:30.7813992+01:00","tags":[]},"/Cours/lesson16":{"title":"16. QT5 (intro)","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=kormmrBVi\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n","lastmodified":"2024-03-25T01:26:58.1362803+01:00","tags":[]},"/Cours/lesson17":{"title":"17. QT5 (installation)","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=ut5ZmPi6d\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n\r\n## Description\r\n\r\n- [Lien téléchargement Qt Designer](https://build-system.fman.io/qt-designer-download)\r\n","lastmodified":"2024-03-25T01:27:29.982616+01:00","tags":[]},"/Cours/lesson18":{"title":"18. QT Designer et interface","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=pUpNWiJSq\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n\r\n## Description\r\n\r\npas de description pour le moment; cette page sera mise à jour après avoir reçu votre feedback. Merci !\r\n","lastmodified":"2024-03-25T01:31:06.7503818+01:00","tags":[]},"/Cours/lesson19":{"title":"19. QT5 et Python","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=vFbHHKBry\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n\r\n## Description\r\n\r\n### Code Générique (Généralement inclu dans l'examen du BAC)\r\n\r\n```Python\r\n\r\nfrom PyQt5.uic import loadUi\r\nfrom PyQt5.QtWidgets import QApplication\r\n\r\n\r\n\r\n\r\napp = QApplication([])\r\n## changer le nom de l'interface !\r\nwindows = loadUi (\"interface1.ui\")\r\nwindows.show()\r\n## changer le nom de la fonction !\r\nwindows.bouton1.clicked.connect(Bonjour)\r\napp.exec_()\r\n\r\n\r\n```\r\n\r\n### Code Exemple (inclu dans la vidéo) :\r\n\r\n```Python\r\n\r\nfrom PyQt5.uic import loadUi\r\nfrom PyQt5.QtWidgets import QApplication\r\n\r\n\r\n\r\n\r\ndef Bonjour ():\r\n    text = windows.input.text()\r\n    if len(text) \u003c 3:\r\n        windows.label.setText(\"Donner un texte de longueur suppérieure à 3\")\r\n        windows.input.setText(\"\")\r\n    else:\r\n        windows.label.setText(text)\r\n        windows.input.setText(\"\")\r\n\r\n\r\n\r\napp = QApplication([])\r\nwindows = loadUi (\"interface1.ui\")\r\nwindows.show()\r\nwindows.bouton1.clicked.connect(Bonjour)\r\napp.exec_()\r\n\r\n```\r\n","lastmodified":"2024-03-25T01:33:52.6291622+01:00","tags":[]},"/Cours/lesson2":{"title":"2. Les Types de Données (nombres et booléan)","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=Kv2xSLpVM\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n\r\n## Exemples\r\n\r\n### Addition (Addition)\r\n\r\n```python\r\n# Addition\r\na = 5\r\nb = 3\r\nresult = a + b\r\nprint(result)  # Output: 8\r\n```\r\n\r\n### Subtraction (Soustraction)\r\n\r\n```python\r\n# Subtraction\r\na = 10\r\nb = 7\r\nresult = a - b\r\nprint(result)  # Output: 3\r\n```\r\n\r\n### Multiplication (Multiplication)\r\n\r\n```python\r\n# Multiplication\r\na = 4\r\nb = 6\r\nresult = a * b\r\nprint(result)  # Output: 24\r\n```\r\n\r\n### Division (Division)\r\n\r\n```python\r\n# Division\r\na = 10\r\nb = 2\r\nresult = a / b\r\nprint(result)  # Output: 5.0\r\n```\r\n\r\n### Exponentiation (Exponentiation)\r\n\r\n```python\r\n# Exponentiation\r\na = 2\r\nb = 3\r\nresult = a ** b\r\nprint(result)  # Output: 8\r\n```\r\n\r\n### Modulo (Modulo)\r\n\r\n```python\r\n# Modulo\r\na = 10\r\nb = 3\r\nresult = a % b\r\nprint(result)  # Output: 1\r\n```\r\n\r\n### Tableau de vérité\r\n\r\n| A     | B     | A and B | A or B | not A |\r\n| ----- | ----- | ------- | ------ | ----- |\r\n| true  | true  | true    | true   | false |\r\n| true  | false | false   | true   | false |\r\n| false | true  | false   | true   | true  |\r\n| false | false | false   | false  | true  |\r\n\r\nLes opérations de comparaison en Python avec des exemples :\r\n\r\n1. Égal à (`==`) : Vérifie si deux valeurs sont égales.\r\n   Exemple :\r\n\r\n   ```python\r\n   a = 5\r\n   b = 5\r\n   print(a == b)  # Output: True\r\n   ```\r\n\r\n2. Différent de (`!=`) : Vérifie si deux valeurs ne sont pas égales.\r\n   Exemple :\r\n\r\n   ```python\r\n   a = 5\r\n   b = 3\r\n   print(a != b)  # Output: True\r\n   ```\r\n\r\n3. Supérieur à (`\u003e`) : Vérifie si la première valeur est strictement supérieure à la deuxième.\r\n   Exemple :\r\n\r\n   ```python\r\n   a = 7\r\n   b = 5\r\n   print(a \u003e b)  # Output: True\r\n   ```\r\n\r\n4. Inférieur à (`\u003c`) : Vérifie si la première valeur est strictement inférieure à la deuxième.\r\n   Exemple :\r\n\r\n   ```python\r\n   a = 3\r\n   b = 5\r\n   print(a \u003c b)  # Output: True\r\n   ```\r\n\r\n5. Supérieur ou égal à (`\u003e=`) : Vérifie si la première valeur est supérieure ou égale à la deuxième.\r\n   Exemple :\r\n\r\n   ```python\r\n   a = 5\r\n   b = 5\r\n   print(a \u003e= b)  # Output: True\r\n   ```\r\n\r\n6. Inférieur ou égal à (`\u003c=`) : Vérifie si la première valeur est inférieure ou égale à la deuxième.\r\n   Exemple :\r\n   ```python\r\n   a = 3\r\n   b = 5\r\n   print(a \u003c= b)  # Output: True\r\n   ```\r\n\r\nCes opérations de comparaison sont couramment utilisées en Python pour évaluer des conditions dans les instructions `if`, `elif` et `while`, entre autres.\r\n","lastmodified":"2024-03-24T11:07:43.3399288+01:00","tags":[]},"/Cours/lesson3":{"title":"3. Chaine De Caractère","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=M62SLOSPh\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n\r\n## Description\r\n\r\nVoici les opérations courantes sur les chaînes de caractères en Python, avec des exemples :\r\n\r\n### Déclaration de chaîne de caractères :\r\n\r\nUne chaîne de caractères peut être déclarée en utilisant des guillemets simples (' '), des guillemets doubles (\" \"), ou même des triples guillemets (''' ''' ou \"\"\" \"\"\") pour les chaînes multilignes.\r\n\r\nExemples :\r\n\r\n```python\r\n# Utilisation de guillemets simples\r\nchaine_simple = 'Bonjour'\r\n\r\n# Utilisation de guillemets doubles\r\nchaine_double = \"Python\"\r\n\r\n# Utilisation de triples guillemets pour une chaîne multiligne\r\nchaine_multiligne = '''Ceci est\r\nune chaîne\r\nmultiligne'''\r\n\r\nprint(chaine_simple)\r\nprint(chaine_double)\r\nprint(chaine_multiligne)\r\n```\r\n\r\n### Indexation de chaîne de caractères :\r\n\r\nLes caractères d'une chaîne de caractères peuvent être accédés en utilisant l'index de chaque caractère. L'index commence à 0 pour le premier caractère et va jusqu'à la longueur de la chaîne moins 1.\r\n\r\nExemple :\r\n\r\n```python\r\nmot = \"Python\"\r\nprint(mot[0])   # Output: P (Premier caractère)\r\nprint(mot[3])   # Output: h (Quatrième caractère)\r\nprint(mot[-1])  # Output: n (Dernier caractère)\r\n```\r\n\r\n### Longueur de chaîne de caractères :\r\n\r\nLa fonction `len()` est utilisée pour trouver la longueur d'une chaîne de caractères, c'est-à-dire le nombre de caractères qu'elle contient.\r\n\r\nExemple :\r\n\r\n```python\r\nmot = \"Bonjour\"\r\nlongueur = len(mot)\r\nprint(longueur)  # Output: 7\r\n```\r\n\r\n### Caractères spéciaux dans les chaînes de caractères :\r\n\r\nLes chaînes de caractères peuvent contenir des caractères spéciaux, tels que les sauts de ligne (\\n), les tabulations (\\t), les guillemets (\\\") ou les apostrophes (\\'). Pour inclure ces caractères dans une chaîne, utilisez des séquences d'échappement (\\).\r\n\r\nExemple :\r\n\r\n```python\r\nchaine = \"Ceci est une chaîne avec une nouvelle ligne\\nEt une tabulation\\tEt des guillemets \\\"\\\"\"\r\nprint(chaine)\r\n```\r\n\r\nCes opérations sont couramment utilisées lors du travail avec des chaînes de caractères en Python, que ce soit pour la manipulation de texte, le traitement de fichiers, ou d'autres tâches liées au traitement des données textuelles.\r\n","lastmodified":"2024-03-25T00:07:23.0357192+01:00","tags":[]},"/Cours/lesson4":{"title":"4. Variables","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=ykMOTAYQb\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n\r\n## Description\r\n\r\nVoici des exemples des opérations de base sur les variables en Python :\r\n\r\n### Déclaration de variables :\r\n\r\nEn Python, les variables peuvent être déclarées en leur attribuant une valeur à l'aide de l'opérateur d'assignation (`=`).\r\n\r\nExemples :\r\n\r\n```python\r\n# Déclaration d'une variable numérique\r\nnombre = 10\r\n\r\n# Déclaration d'une variable de chaîne de caractères\r\nmessage = \"Bonjour\"\r\n\r\n# Déclaration d'une variable booléenne\r\nest_vrai = True\r\n\r\nprint(nombre)\r\nprint(message)\r\nprint(est_vrai)\r\n```\r\n\r\n### Incrémentation de variables (numériques) :\r\n\r\nPour augmenter la valeur d'une variable numérique, on peut utiliser l'opérateur d'addition (`+=`) ou l'opérateur d'incrémentation (`+=`).\r\n\r\nExemple :\r\n\r\n```python\r\ncompteur = 0\r\ncompteur = compteur + 1  # Incrémentation de 1\r\nprint(compteur)  # Output: 1\r\n```\r\n\r\n### Récupération de variables :\r\n\r\nLes valeurs des variables peuvent être récupérées en les référençant simplement par leur nom.\r\n\r\nExemple :\r\n\r\n```python\r\nnom = \"Alice\"\r\nprint(nom)  # Output: Alice\r\n```\r\n\r\nCes opérations de base sur les variables sont essentielles pour manipuler et gérer des données dans les programmes Python.\r\n","lastmodified":"2024-03-25T00:08:58.3116648+01:00","tags":[]},"/Cours/lesson5":{"title":"5. Les entrées d'utilisatuer","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=ko0FNTNdR\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n\r\n## Description\r\n\r\nVoici comment utiliser la fonction `input()` en Python pour obtenir des entrées utilisateur :\r\n\r\n### Obtention des entrées utilisateur avec `input()` :\r\n\r\nLa fonction `input()` est utilisée pour obtenir une entrée utilisateur à partir de la ligne de commande. Elle renvoie toujours une chaîne de caractères (string), même si l'utilisateur entre un nombre ou un autre type de données.\r\n\r\nExemple :\r\n\r\n```python\r\n# Demander à l'utilisateur son nom\r\nnom_utilisateur = input(\"Entrez votre nom : \")\r\n\r\n# Demander à l'utilisateur son âge\r\nage_utilisateur = input(\"Entrez votre âge : \")\r\n\r\n# La valeur renvoyée par input() est toujours une chaîne de caractères\r\n# Donc, même si l'utilisateur entre un nombre, il sera traité comme une chaîne\r\nprint(\"Bonjour \" + nom_utilisateur + \"! Vous avez \" + age_utilisateur + \" ans.\")\r\n```\r\n\r\nDans cet exemple, l'utilisateur est invité à saisir son nom et son âge. Même si l'utilisateur entre un nombre pour l'âge, il est traité comme une chaîne de caractères.\r\n","lastmodified":"2024-03-25T00:10:58.9331864+01:00","tags":[]},"/Cours/lesson6":{"title":"6. if; elif et else","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=RF9IE8ysL\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n\r\n## Description\r\n\r\nVoici comment utiliser les instructions `if`, `elif` et `else` en Python pour contrôler le flux d'exécution du programme :\r\n\r\n### Instructions `if`, `elif` et `else` :\r\n\r\nEn Python, les instructions `if`, `elif` (abréviation de \"else if\") et `else` sont utilisées pour créer des conditions dans le code. Elles permettent d'exécuter certaines parties du code en fonction de la véracité des expressions conditionnelles.\r\n\r\nExemple :\r\n\r\n```python\r\n# Demander à l'utilisateur son âge\r\nage_utilisateur = int(input(\"Entrez votre âge : \"))\r\n\r\n# Vérifier si l'utilisateur est majeur\r\nif age_utilisateur \u003e= 18:\r\n    print(\"Vous êtes majeur.\")\r\nelif age_utilisateur \u003e= 13:\r\n    print(\"Vous êtes adolescent.\")\r\nelse:\r\n    print(\"Vous êtes enfant.\")\r\n\r\n# L'instruction `elif` est utilisée pour vérifier une autre condition si la première condition n'est pas vraie.\r\n# L'instruction `else` est utilisée pour exécuter un bloc de code si aucune des conditions précédentes n'est vraie.\r\n```\r\n\r\nDans cet exemple, selon l'âge entré par l'utilisateur, le programme affichera un message différent. Si l'âge est supérieur ou égal à 18, il affichera \"Vous êtes majeur\". Si l'âge est compris entre 13 et 17 (inclus), il affichera \"Vous êtes adolescent\". Sinon, c'est-à-dire si l'âge est inférieur à 13, il affichera \"Vous êtes enfant\".\r\n","lastmodified":"2024-03-25T00:12:49.7752364+01:00","tags":[]},"/Cours/lesson7":{"title":"7. Random et Valeur Aléatoire","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=n1G2P1ysN\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n\r\n## Description\r\n\r\nVoici comment utiliser la fonction `randint()` en Python pour générer des nombres entiers aléatoires, ainsi qu'un exemple pour générer un nombre flottant avec cette fonction :\r\n\r\n### Utilisation de la fonction `randint()` pour les nombres entiers :\r\n\r\nLa fonction `randint(a, b)` du module `random` est utilisée pour générer un nombre entier aléatoire compris entre `a` et `b`, inclusivement.\r\n\r\nExemple :\r\n\r\n```python\r\nfrom random import randint\r\n\r\n# Générer un nombre entier aléatoire entre 1 et 100\r\nnombre_entier = randint(1, 100)\r\nprint(\"Nombre aléatoire entre 1 et 100 :\", nombre_entier)\r\n```\r\n\r\n### Génération d'un nombre flottant avec la fonction `randint()` :\r\n\r\nPour générer un nombre flottant avec la fonction `randint()`, vous pouvez multiplier le résultat par un nombre flottant et arrondir le résultat au nombre de décimales souhaité.\r\n\r\nExemple :\r\n\r\n```python\r\nfrom random import randint\r\n\r\n# Générer un nombre flottant aléatoire entre 1 et 10 avec 2 décimales\r\nnombre_flottant = randint(1, 100) * 0.1\r\nprint(\"Nombre flottant aléatoire entre 1 et 10 :\", nombre_flottant)\r\n```\r\n\r\nDans cet exemple, `randint(1, 100)` génère un nombre entier aléatoire entre 1 et 100, puis on le multiplie par `0.01` pour obtenir un nombre flottant aléatoire entre 0.01 et 1.0.\r\n","lastmodified":"2024-03-25T00:15:47.4132886+01:00","tags":[]},"/Cours/lesson8":{"title":"8. les boucles While et For","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=GxLJIqMqF\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n\r\n## Description\r\n\r\nVoici comment utiliser la fonction `range()`, les boucles `for` et les boucles `while` en Python avec des exemples simples et multiples :\r\n\r\n### Fonction `range()` :\r\n\r\nLa fonction `range()` est utilisée pour générer une séquence d'entiers dans un intervalle donné. Elle est souvent utilisée avec les boucles `for`.\r\n\r\nExemples :\r\n\r\n```python\r\n# Exemple 1 : Utilisation de range pour itérer sur une séquence d'entiers\r\nfor i in range(5):\r\n    print(i)\r\n# Output: 0 1 2 3 4\r\n\r\n# Exemple 2 : Utilisation de range avec un début, une fin et un pas\r\nfor i in range(1, 10, 2):\r\n    print(i)\r\n# Output: 1 3 5 7 9\r\n```\r\n\r\n### Boucles `for` :\r\n\r\nLa boucle `for` est utilisée pour itérer sur une séquence (telle que celle générée par `range()`) ou une collection (comme une liste ou une chaîne de caractères).\r\n\r\nExemples :\r\n\r\n```python\r\n# Exemple 1 : Itération sur une chaîne de caractères\r\nmot = \"Python\"\r\nfor lettre in mot:\r\n    print(lettre)\r\n# Output: P y t h o n\r\n```\r\n\r\n### Boucles `while` :\r\n\r\nLa boucle `while` est utilisée pour exécuter un bloc de code tant qu'une condition donnée est vraie.\r\n\r\nExemples :\r\n\r\n```python\r\n# Exemple 1 : Utilisation de while pour afficher les nombres de 1 à 5\r\ni = 1\r\nwhile i \u003c= 5:\r\n    print(i)\r\n    i += 1\r\n# Output: 1 2 3 4 5\r\n\r\n# Exemple 2 : Utilisation de while pour attendre que l'utilisateur entre une entrée spécifique\r\nentree_utilisateur = \"\"\r\nwhile entree_utilisateur != \"oui\":\r\n    entree_utilisateur = input(\"Veuillez entrer 'oui' pour continuer : \")\r\nprint(\"Programme terminé.\")\r\n```\r\n\r\nCes exemples illustrent comment utiliser la fonction `range()`, les boucles `for` et les boucles `while` en Python pour effectuer des itérations et contrôler le flux d'exécution du programme.\r\n","lastmodified":"2024-03-25T00:18:03.8081266+01:00","tags":[]},"/Cours/lesson9":{"title":"9. Contrôle de Saisie","content":"\r\n## Vidéo\r\n\r\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;\"\u003e\r\n\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"https://video.pratik.tn/embed?m=ySWEYD3DJ\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\r\n\r\n\u003c/div\u003e\r\n\r\n## Description\r\n\r\nVoici cinq exemples courants de contrôle de saisie utilisant les boucles `while` et `for` en Python :\r\n\r\n### Utilisation de la boucle `while` pour le contrôle de saisie :\r\n\r\n1. **Vérification de l'entrée utilisateur pour un nombre entier positif :**\r\n\r\n```python\r\nentree = -1\r\nwhile entree \u003c 0:\r\n    entree = int(input(\"Entrez un nombre entier positif : \"))\r\n```\r\n\r\n2. **Demande de confirmation de l'utilisateur :**\r\n\r\n```python\r\nconfirmation = \"\"\r\nwhile confirmation.lower() != \"oui\":\r\n    confirmation = input(\"Voulez-vous continuer ? (oui/non) : \")\r\n```\r\n\r\n3. **Saisie d'un mot de passe correct :**\r\n\r\n```python\r\nmot_de_passe = \"\"\r\nwhile mot_de_passe != \"secret\":\r\n    mot_de_passe = input(\"Entrez le mot de passe : \")\r\n```\r\n\r\n4. **Validation d'une entrée numérique dans une plage spécifique :**\r\n\r\n```python\r\nchoix = 0\r\nwhile choix not in range(1, 4):\r\n    choix = int(input(\"Entrez votre choix (1-3) : \"))\r\n```\r\n\r\n5. **Boucle jusqu'à ce que l'utilisateur entre un caractère spécifique :**\r\n\r\n```python\r\nreponse = \"\"\r\nwhile reponse != \"a\":\r\n    reponse = input(\"Entrez 'a' pour arrêter : \")\r\n```\r\n\r\n### Utilisation de la boucle `for` pour le contrôle de saisie :\r\n\r\n1. **Validation d'une entrée numérique dans une liste de choix :**\r\n\r\n```python\r\nchoix_valides = [\"oui\", \"non\", \"peut-être\"]\r\nentree = input(\"Entrez votre choix (oui/non/peut-être) : \")\r\nwhile entree not in choix_valides:\r\n    entree = input(\"Choix invalide. Entrez à nouveau : \")\r\n```\r\n\r\n2. **Saisie de caractères jusqu'à ce que la longueur minimale soit atteinte :**\r\n\r\n```python\r\nmot = input(\"Entrez un mot d'au moins 5 caractères : \")\r\nwhile len(mot) \u003c 5:\r\n    mot = input(\"Le mot est trop court. Entrez à nouveau : \")\r\n```\r\n\r\n3. **Validation d'une entrée numérique positive :**\r\n\r\n```python\r\nnombre = -1\r\nfor i in range(3):  # Trois tentatives maximum\r\n    nombre = int(input(\"Entrez un nombre positif : \"))\r\n    if nombre \u003e= 0:\r\n        break\r\n    print(\"Nombre invalide.\")\r\n```\r\n\r\n4. **Boucle jusqu'à ce qu'une réponse correcte soit donnée :**\r\n\r\n```python\r\nreponse = \"\"\r\nchoix_possibles = [\"oui\", \"non\"]\r\nfor i in range(3):  # Trois tentatives maximum\r\n    reponse = input(\"Voulez-vous continuer ? (oui/non) : \")\r\n    if reponse in choix_possibles:\r\n        break\r\n    print(\"Réponse invalide.\")\r\n```\r\n\r\n5. **Validation d'une entrée numérique dans une plage spécifique :**\r\n\r\n```python\r\nfor i in range(3):  # Trois tentatives maximum\r\n    choix = int(input(\"Entrez un nombre entre 1 et 10 : \"))\r\n    if 1 \u003c= choix \u003c= 10:\r\n        break\r\n    print(\"Nombre invalide.\")\r\n```\r\n\r\nCes exemples illustrent différentes façons d'utiliser les boucles `while` et `for` pour le contrôle de saisie en Python.\r\n","lastmodified":"2024-03-25T00:19:41.6473103+01:00","tags":[]},"/Examens-Bac-Pratique-Pr%C3%A9c%C3%A9dents/alert":{"title":"0. Message Important !","content":"\r\n## Noter Bien :\r\n\r\nNotre plateforme est mise à jour quotidiennement ! Nous sommes très désireux de faire de cette plateforme la meilleure jamais créée et nous comptons sur votre soutien constant. Nous vous remercions pour votre patience ! **Tous les 3 jours, une nouvelle correction vidéo pour un examen du BAC sera mise en ligne !** Si vous avez des questions, n'hésitez pas à nous les poser sur **Discord** !\r\n","lastmodified":"2024-03-25T02:37:56.5417505+01:00","tags":[]},"/Examens-Bac-Pratique-Pr%C3%A9c%C3%A9dents/exam1":{"title":"1. Session 2022 - Nombre Ondulant","content":"\r\n## Examen en PDF\r\n\r\n\u003cembed src=\"/devoirs/ondulant.pdf\" type=\"application/pdf\" width=\"100%\" height=\"600px\" /\u003e\r\n\r\n## Description :\r\n\r\nC'est un devoir de bac pratique officiel proposé en 2022, **une correction en format vidéo sera publiée dans 10 jours Maximum!**\r\n\r\n### Code de la correction Python :\r\n\r\n```Python\r\n\r\nfrom PyQt5.QtWidgets import QApplication\r\nfrom PyQt5.uic import loadUi\r\n\r\n\r\ndef verif(text):\r\n    return text.isnumeric() and int(text) \u003e 99\r\n\r\n\r\ndef ondulant(text):\r\n    n = int(text)\r\n    for i in range(0, len(text) - 2, 2):\r\n        if not (text[i] == text[i+2] and text[i] != text[i+1]):\r\n            return False\r\n    return True\r\n\r\n\r\ndef Play():\r\n    text = fen.lineEdit.text()\r\n\r\n    if (verif(text)):\r\n        if (ondulant(text)):\r\n            fen.label_3.setText(f\"{text} est un nombre ondulant !\")\r\n\r\n        else:\r\n            fen.label_3.setText(f\"{text} n'est pas un nombre ondulant !\")\r\n\r\n    else:\r\n        fen.label_3.setText(\"Veillez introduire un nombre \u003e= 100\")\r\n\r\n\r\napp = QApplication([])\r\n\r\nfen = loadUi(\"ondulant.ui\")\r\n\r\nfen.pushButton.clicked.connect(Play)\r\n\r\nfen.show()\r\n\r\napp.exec()\r\n\r\n\r\n\r\n\r\n```\r\n\r\n### Fichier Interface QT (placer dans le même dossier que le code python):\r\n\r\n- \u003ca href=\"/ui-files/ondulant.ui\" download\u003eTélécharger le fichier de l'interface\u003c/a\u003e\r\n","lastmodified":"2024-03-25T02:11:03.0176132+01:00","tags":[]},"/Examens-Bac-Pratique-Pr%C3%A9c%C3%A9dents/exam2":{"title":"2. Session 2022 - Nombre Lisse","content":"\r\n## Examen en PDF\r\n\r\n\u003cembed src=\"/devoirs/lisse.pdf\" type=\"application/pdf\" width=\"100%\" height=\"600px\" /\u003e\r\n\r\n## Description :\r\n\r\nC'est un devoir de bac pratique officiel proposé en 2022, **une correction en format vidéo sera publiée dans 10 jours Maximum!**\r\n\r\n### Code de la correction Python :\r\n\r\n```Python\r\n\r\nfrom PyQt5.QtWidgets import QApplication\r\nfrom PyQt5.uic import loadUi\r\nfrom math import sqrt\r\n\r\n\r\ndef verif(text):\r\n    return text.isnumeric() and int(text) \u003e 1\r\n\r\n\r\ndef premier(n):\r\n    c = 0\r\n    for i in range(2, n // 2 + 1):\r\n        if n % i == 0:\r\n            c = c + 1\r\n    return c == 0\r\n\r\n\r\ndef lisse(n):\r\n    pgd = 1\r\n    for i in range(2, n // 2 + 1):\r\n        if (n % i == 0 and premier(i)):\r\n            pgd = i\r\n    return pgd \u003c= sqrt(n)\r\n\r\n\r\ndef Play():\r\n    text = fen.lineEdit.text()\r\n    if (verif(text)):\r\n        if (lisse(int(text))):\r\n            fen.label_3.setText(f\"{text} est un nombre lisse\")\r\n        else:\r\n            fen.label_3.setText(f\"{text} n'est pas un nombre lisse\")\r\n    else:\r\n        fen.label_3.setText(\"Veillez introduire un nombre \u003e 1\")\r\n        fen.lineEdit.clear()\r\n\r\n\r\napp = QApplication([])\r\n\r\nfen = loadUi(\"lisse.ui\")\r\n\r\nfen.pushButton.clicked.connect(Play)\r\n\r\nfen.show()\r\n\r\napp.exec()\r\n\r\n\r\n```\r\n\r\n### Fichier Interface QT (placer dans le même dossier que le code python):\r\n\r\n- \u003ca href=\"/ui-files/lisse.ui\" download\u003eTélécharger le fichier de l'interface\u003c/a\u003e\r\n","lastmodified":"2024-03-25T02:23:24.5147731+01:00","tags":[]}}